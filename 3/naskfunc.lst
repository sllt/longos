     1 00000000                                 ; naskfunc
     2 00000000                                 ; TAB=4
     3 00000000                                 ;==================================================================
     4 00000000                                 ; 注释：宅
     5 00000000                                 ; 时间：2013年2月18日
     6 00000000                                 ;==================================================================
     7 00000000                                 [FORMAT "WCOFF"]                ; 制作目标文件的模式
     8 00000000                                 [INSTRSET "i486p"]              ; 使用到486为止的指令
     9 00000000                                 [BITS 32]                       ; 制作32位模式用的机器语言
    10 00000000                                 [FILE "naskfunc.nas"]           ; 源程序文件名
    11 00000000                                 
    12 00000000                                         GLOBAL  _io_hlt, _io_cli, _io_sti, _io_stihlt
    13 00000000                                         GLOBAL  _io_in8,  _io_in16,  _io_in32
    14 00000000                                         GLOBAL  _io_out8, _io_out16, _io_out32
    15 00000000                                         GLOBAL  _io_load_eflags, _io_store_eflags
    16 00000000                                 
    17 00000000                                 
    18                                          [SECTION .text]                 ; 代码段
    19 00000000                                 
    20 00000000                                 _io_hlt:    ; void io_hlt(void);    
    21 00000000 F4                                      HLT
    22 00000001 C3                                      RET
    23 00000002                                 
    24 00000002                                 _io_cli:    ; void io_cli(void);    ; 关闭所有可屏蔽中断
    25 00000002 FA                                      CLI
    26 00000003 C3                                      RET
    27 00000004                                 
    28 00000004                                 _io_sti:    ; void io_sti(void);    ; 打开所有可屏蔽中断
    29 00000004 FB                                      STI
    30 00000005 C3                                      RET
    31 00000006                                 
    32 00000006                                 _io_stihlt: ; void io_stihlt(void); 
    33 00000006 FB                                      STI
    34 00000007 F4                                      HLT
    35 00000008 C3                                      RET
    36 00000009                                 
    37 00000009                                 _io_in8:    ; int io_in8(int port); ; 从port端口读入8位数据到AL中
    38 00000009 8B 54 24 04                             MOV     EDX,[ESP+4]     ; port
    39 0000000D B8 00000000                             MOV     EAX,0
    40 00000012 EC                                      IN      AL,DX
    41 00000013 C3                                      RET
    42 00000014                                 
    43 00000014                                 _io_in16:   ; int io_in16(int port); ; 从port端口读入16位数据到AX中
    44 00000014 8B 54 24 04                             MOV     EDX,[ESP+4]     ; port
    45 00000018 B8 00000000                             MOV     EAX,0
    46 0000001D 66 ED                                   IN      AX,DX
    47 0000001F C3                                      RET
    48 00000020                                 
    49 00000020                                 _io_in32:   ; int io_in32(int port); ; 从port端口读入32位数据到EAX中
    50 00000020 8B 54 24 04                             MOV     EDX,[ESP+4]     ; port
    51 00000024 ED                                      IN      EAX,DX
    52 00000025 C3                                      RET
    53 00000026                                 
    54 00000026                                 _io_out8:   ; void io_out8(int port, int data);     ; 将8位的data输出到port端口
    55 00000026 8B 54 24 04                             MOV     EDX,[ESP+4]     ; port
    56 0000002A 8A 44 24 08                             MOV     AL,[ESP+8]      ; data
    57 0000002E EE                                      OUT     DX,AL
    58 0000002F C3                                      RET
    59 00000030                                 
    60 00000030                                 _io_out16:  ; void io_out16(int port, int data);    ; 将16位的data输出到port端口
    61 00000030 8B 54 24 04                             MOV     EDX,[ESP+4]     ; port
    62 00000034 8B 44 24 08                             MOV     EAX,[ESP+8]     ; data
    63 00000038 66 EF                                   OUT     DX,AX
    64 0000003A C3                                      RET
    65 0000003B                                 
    66 0000003B                                 _io_out32:  ; void io_out32(int port, int data);    ; 将32位的data输出到port端口
    67 0000003B 8B 54 24 04                             MOV     EDX,[ESP+4]     ; port
    68 0000003F 8B 44 24 08                             MOV     EAX,[ESP+8]     ; data
    69 00000043 EF                                      OUT     DX,EAX
    70 00000044 C3                                      RET
    71 00000045                                 
    72 00000045                                 _io_load_eflags:    ; int io_load_eflags(void);     ; 将EFLAGS寄存器的内容返回
    73 00000045 9C                                      PUSHFD      ; PUSH EFLAGS 
    74 00000046 58                                      POP     EAX ; EAX = EFLAGS
    75 00000047 C3                                      RET
    76 00000048                                 
    77 00000048                                 _io_store_eflags:   ; void io_store_eflags(int eflags); ; 将参数eflags的内容作为EFLAGS寄存器的值
    78 00000048 8B 44 24 04                             MOV     EAX,[ESP+4] 
    79 0000004C 50                                      PUSH    EAX
    80 0000004D 9D                                      POPFD       ; POP EFLAGS 
    81 0000004E C3                                      RET
